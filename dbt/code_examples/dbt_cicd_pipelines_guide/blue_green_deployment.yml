name: Blue-Green Deployment Pattern

on:
  push:
    branches: [main]

env:
  DBT_PROFILES_DIR: ./
  DBT_PROJECT_DIR: ./

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        pip install dbt-snowflake dbt-core
        dbt deps
    
    - name: Determine deployment slot
      id: slot
      run: |
        # Query current active slot from database
        CURRENT_SLOT=$(dbt run-operation get_current_slot --target prod --quiet)
        NEW_SLOT=$([ "$CURRENT_SLOT" = "blue" ] && echo "green" || echo "blue")
        echo "current_slot=$CURRENT_SLOT" >> $GITHUB_OUTPUT
        echo "new_slot=$NEW_SLOT" >> $GITHUB_OUTPUT
        echo "Deploying to $NEW_SLOT slot (current: $CURRENT_SLOT)"
      env:
        DBT_SNOWFLAKE_ACCOUNT: ${{ secrets.DBT_SNOWFLAKE_ACCOUNT }}
        DBT_SNOWFLAKE_USER: ${{ secrets.DBT_SNOWFLAKE_USER }}
        DBT_SNOWFLAKE_PASSWORD: ${{ secrets.DBT_SNOWFLAKE_PASSWORD }}
        DBT_SNOWFLAKE_ROLE: ${{ secrets.DBT_SNOWFLAKE_ROLE }}
        DBT_SNOWFLAKE_DATABASE: ${{ secrets.DBT_SNOWFLAKE_DATABASE_PROD }}
        DBT_SNOWFLAKE_WAREHOUSE: ${{ secrets.DBT_SNOWFLAKE_WAREHOUSE }}
        DBT_SNOWFLAKE_SCHEMA: prod
        
    - name: Deploy to inactive slot
      run: |
        # Deploy models to the inactive slot
        dbt run --target prod_${{ steps.slot.outputs.new_slot }} --vars '{deployment_slot: ${{ steps.slot.outputs.new_slot }}}'
      env:
        DBT_SNOWFLAKE_ACCOUNT: ${{ secrets.DBT_SNOWFLAKE_ACCOUNT }}
        DBT_SNOWFLAKE_USER: ${{ secrets.DBT_SNOWFLAKE_USER }}
        DBT_SNOWFLAKE_PASSWORD: ${{ secrets.DBT_SNOWFLAKE_PASSWORD }}
        DBT_SNOWFLAKE_ROLE: ${{ secrets.DBT_SNOWFLAKE_ROLE }}
        DBT_SNOWFLAKE_DATABASE: ${{ secrets.DBT_SNOWFLAKE_DATABASE_PROD }}
        DBT_SNOWFLAKE_WAREHOUSE: ${{ secrets.DBT_SNOWFLAKE_WAREHOUSE }}
        DBT_SNOWFLAKE_SCHEMA: prod_${{ steps.slot.outputs.new_slot }}
        
    - name: Test new deployment
      run: |
        # Run tests against the new slot
        dbt test --target prod_${{ steps.slot.outputs.new_slot }}
      env:
        DBT_SNOWFLAKE_ACCOUNT: ${{ secrets.DBT_SNOWFLAKE_ACCOUNT }}
        DBT_SNOWFLAKE_USER: ${{ secrets.DBT_SNOWFLAKE_USER }}
        DBT_SNOWFLAKE_PASSWORD: ${{ secrets.DBT_SNOWFLAKE_PASSWORD }}
        DBT_SNOWFLAKE_ROLE: ${{ secrets.DBT_SNOWFLAKE_ROLE }}
        DBT_SNOWFLAKE_DATABASE: ${{ secrets.DBT_SNOWFLAKE_DATABASE_PROD }}
        DBT_SNOWFLAKE_WAREHOUSE: ${{ secrets.DBT_SNOWFLAKE_WAREHOUSE }}
        DBT_SNOWFLAKE_SCHEMA: prod_${{ steps.slot.outputs.new_slot }}
        
    - name: Switch traffic to new slot
      run: |
        # Update views/aliases to point to new slot
        dbt run-operation switch_slot --args '{slot: ${{ steps.slot.outputs.new_slot }}}' --target prod
      env:
        DBT_SNOWFLAKE_ACCOUNT: ${{ secrets.DBT_SNOWFLAKE_ACCOUNT }}
        DBT_SNOWFLAKE_USER: ${{ secrets.DBT_SNOWFLAKE_USER }}
        DBT_SNOWFLAKE_PASSWORD: ${{ secrets.DBT_SNOWFLAKE_PASSWORD }}
        DBT_SNOWFLAKE_ROLE: ${{ secrets.DBT_SNOWFLAKE_ROLE }}
        DBT_SNOWFLAKE_DATABASE: ${{ secrets.DBT_SNOWFLAKE_DATABASE_PROD }}
        DBT_SNOWFLAKE_WAREHOUSE: ${{ secrets.DBT_SNOWFLAKE_WAREHOUSE }}
        DBT_SNOWFLAKE_SCHEMA: prod
        
    - name: Cleanup old slot (optional)
      if: success()
      run: |
        # Optionally cleanup the old slot after successful deployment
        echo "Deployment successful. Old slot ${{ steps.slot.outputs.current_slot }} can be cleaned up"
        # dbt run-operation cleanup_slot --args '{slot: ${{ steps.slot.outputs.current_slot }}}' --target prod
        
    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed. Rolling back to ${{ steps.slot.outputs.current_slot }}"
        # Ensure current slot remains active (no action needed for blue-green)
        exit 1